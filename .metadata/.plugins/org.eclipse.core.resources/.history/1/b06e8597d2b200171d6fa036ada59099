package playground;

/* this file is for recPow and mergeSort */

public class TryRecursion {

	public static void main(String[] args) {
		System.out.println("2^0 = "+recPow(0));
		System.out.println("2^-2 = "+recPow(-2));
		System.out.println("2^10 = "+recPow(10));
		
		int[] a = { 2, 4, 9, 25, 34 };
		int[] b = { 4, 8, 12, 23, 36 };
        int[] c = mergeSortedArray(a, b);
		for (int i = 0; i < c.length; i++) {
			System.out.println(c[i]);
		}
	}

	public static Double recPow(int n) {
		if (n == 0) {
			return 1.0;
		}else if(n > 0){
			return 2*recPow(n-1);
		}else {
			return recPow(n+1)/2;
		}
	}
	
    public static int[] mergeSortedArray(int[] a, int[] b){
       int currentA = 0, currentB = 0, currentC = 0;
       int aLength = a.length;
       int bLength = b.length;
       int[] c = new int[aLength+bLength];

       while(currentA<aLength && currentB <bLength){
          if (a[currentA] < b[currentB]) {
        	        c[currentC]=a[currentA];
        	        currentC++;
        	        currentA++;
          }else {
        	        c[currentC]=b[currentB];
        	        currentC++;
        	        currentB++;
          }   
          System.out.println("first loop"+currentC+"a"+currentA+"b"+currentB);
       }  //this definitely gonna use up one of the list
       
       while(currentC < aLength) {
    	      System.out.println("second loop"+currentC);
          c[currentC++] = a[currentA++];
       }
       while(currentC < bLength) {
    	      System.out.println("third loop"+currentC);
    	      c[currentC++] = b[currentB++];
       }
           
       
       return c;
      }
    
    public static int[] sort(int[] a) {
		if(a.length == 1) {
			return a;
		}
	    int L[] = new int [a.length/2];
	    int R[] = new int [a.length-L.length];
	 
	    System.arraycopy(a, 0, L, 0, L.length);
        System.arraycopy(a, L.length,R, 0, R.length);
        
        if(L.length!=1&&L.length!=1) {
            sort(L);
            sort(R);
        }else {
		    
		}
        

        return mergeSortedArray(L, R);
	}
    
    public static int[] mergeSort(int[] a, int[] b) {
    	    int[] c = sort(a);
    	    int[] d = sort(b);
		return mergeSortedArray(c, d);
	}


}
